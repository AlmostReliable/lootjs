def generatedResources = file("src/generated/resources")
def accessWidenerFile = project(":common").file("src/main/resources/${mod_id}.accesswidener")

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    developmentFabric.extendsFrom common
}

loom {
    accessWidenerPath = accessWidenerFile
}

sourceSets {
    main {
        resources {
            srcDir generatedResources
        }
    }
}

dependencies {
    modApi("net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}")
    modApi("net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_version}")

    modApi("dev.latvian.mods:kubejs-fabric:${rootProject.kubejs_version}")

    modApi("dev.latvian.mods:kubejs-fabric:${rootProject.kubejs_version}")
    modCompileOnly("me.shedaniel:RoughlyEnoughItems-api-fabric:${rootProject.rei_version}")
    modCompileOnly("me.shedaniel:RoughlyEnoughItems-default-plugin-fabric:${rootProject.rei_version}")

    modLocalRuntime("me.shedaniel:RoughlyEnoughItems-fabric:${rootProject.rei_version}")

    modApi("curse.maven:rpgdifficulty-480786:3813549")
    modApi("curse.maven:nameplate-551914:3683644")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    bundle(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

// The AW file is needed in :fabric project resources when the game is run.
task copyAccessWidener(type: Copy) {
    from accessWidenerFile
    into generatedResources
}

processResources {
    dependsOn copyAccessWidener
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = "${rootProject.mod_id}-${project.name}"
            from components.java
        }
    }

    repositories {

    }
}
