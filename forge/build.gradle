architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    developmentForge.extendsFrom common
}

loom {
    accessWidenerPath = project(":common").file("src/main/resources/${mod_id}.accesswidener")
    forge {
        convertAccessWideners = true
        extraAccessWideners.add("${mod_id}.accesswidener")
        mixinConfigs = [
                "${mod_id}-forge.mixins.json",
                "${mod_id}-common.mixins.json"
        ]
    }
}

repositories {
    maven {
        name "ModMaven (JEI)"
        url "https://modmaven.dev/"
        content {
            includeGroup "mezz.jei"
            includeGroup "net.darkhax.bookshelf"
            includeGroup "net.darkhax.gamestages"
        }
    }
}

dependencies {
    forge("net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}")

    modApi("dev.latvian.mods:kubejs-forge:${rootProject.kubejs_version}")

    modLocalRuntime modCompileOnly("me.shedaniel:RoughlyEnoughItems-forge:${rootProject.rei_version}")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    bundle(project(path: ":common", configuration: "transformProductionForge")) { transitive false }
}

processResources {
    def toReplace = [
            version          : project.version,
            license          : license,
            minecraft_version: minecraft_version,
            mod_id           : mod_id,
            mod_name         : mod_name,
            mod_author       : mod_author,
            mod_description  : mod_description,
            kubejs_version   : kubejs_version,
            forge_min_version: forge_min_version,
            github_user      : github_user,
            github_repo      : github_repo
    ]

    inputs.properties toReplace
    filesMatching("META-INF/mods.toml") {
        expand toReplace
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : project.mod_id,
                "Specification-Vendor"    : project.mod_author,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : version,
                "Implementation-Vendor"   : project.mod_author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = "${rootProject.mod_id}-${project.name}"
            from components.java
        }
    }

    repositories {
    }
}
