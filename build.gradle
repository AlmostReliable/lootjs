buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7.+'
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

plugins {
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "${minecraft_version}-${mod_version}"
group = "${mod_base_package}.${mod_id}"
archivesBaseName = mod_id

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: mappings_channel, version: mappings_version

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args '-mixin.config=lootjs.mixins.json', '-Dmixin.debug=true'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args '-mixin.config=lootjs.mixins.json'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'lootjs', '--all', '--output', file('src/generated/resources/'), '--existing',
                    file('src/main/resources/')

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        clientTest {
            parent runs.client
            environment 'MOD_CLASSES', 'dummy' // From Forge: FG will replace this but it's needed to run
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
                "${mod_id}_test" {
                    source sourceSets.test
                }
            }
        }

        serverTest {
            parent runs.server
            environment 'MOD_CLASSES', 'dummy' // From Forge: FG will replace this but it's needed to run
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
                "${mod_id}_test" {
                    source sourceSets.test
                }
            }
        }
    }
}

// resources from data generation
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    maven {
        name = "Progwml6 (Just Enough Items)"
        url = "https://dvs1.progwml6.com/files/maven/"
    }

    maven {
        url = "https://maven.architectury.dev"
        content {
            includeGroup "dev.architectury"
        }
    }

    maven {
        url = "https://maven.saps.dev/minecraft"
        content {
            includeGroup "dev.latvian.mods"
        }
    }
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"

    // sets up the mixin config; this gets added to run configurations and the manifest in the final jar
    config "${mod_id}.mixins.json"

    // enables exporting mixin-changed classes to .mixin.out in the run folder
    debug.export = true
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Mixin annotation processor - generates the refmap
    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"

    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")

//    implementation fg.deobf("curse.maven:kubejs-238086:${kubejs_fileid}")
    implementation fg.deobf("dev.latvian.mods:kubejs-forge:${kubejs_version}")
    implementation fg.deobf("dev.architectury:architectury-forge:${architectury_version}")
    implementation fg.deobf("dev.latvian.mods:rhino-forge:${rhino_version}")

    // mods with some global loot
//    runtimeOnly fg.deobf("curse.maven:simplefarming-327554:3400041") // TODO not for 1.16 currently
//    runtimeOnly fg.deobf("curse.maven:silentlib-3235738:3543045")
//    runtimeOnly fg.deobf("curse.maven:scalinghealth-248027:3580899")
//    runtimeOnly fg.deobf("curse.maven:patchouli-306770:3594394")
//    runtimeOnly fg.deobf("curse.maven:mysticalworld-282940:3377210") // TODO not for 1.16 currently
//    runtimeOnly fg.deobf("curse.maven:terrablender-563928:3619749")
//    runtimeOnly fg.deobf("curse.maven:byg-247560:3620164")

    // just ding so I can be brain afk while it's loading
    runtimeOnly fg.deobf("curse.maven:ding-231275:3548400")
}

// This block of code expands all the gradle properties in the specified resource targets.
// It copies them into the targets and expands all the defined properties.
def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta', "${mod_id}.mixins.json".toString()]
def intoTargets = ["$rootDir/out/production/resources/", "$rootDir/out/production/${project.name}.main/", "$rootDir/bin/main/"]
def replaceProperties = [mod_id                 : mod_id,
                         mod_name               : mod_name,
                         mod_version            : mod_version,
                         mod_authors            : mod_authors,
                         mod_description        : mod_description,
                         minecraft_version_range: minecraft_version_range,
                         forge_version_range    : forge_version_range,
                         loader_version_range   : loader_version_range,
                         github_user            : github_user,
                         github_repo            : github_repo,
                         kubejs_version_range   : kubejs_version_range]
processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }

    intoTargets.each { target ->
        if (file(target).exists()) {
            copy {
                from(sourceSets.main.resources) {
                    include resourceTargets
                    expand replaceProperties
                }
                into target
            }
        }
    }
}

curseforge {
    if (System.getenv('CF_API_KEY') != null) {
        // GitHub actions
        apiKey = System.getenv('CF_API_KEY')
    } else {
        // error prevention
        apiKey = "none"
    }
    project {
        id = project_id
        changelogType = 'markdown'
        changelog = "The whole changelog can be found [here](https://github.com/${github_user}/${github_repo}/blob/${github_branch}/CHANGELOG.md)."
        releaseType = 'release'
        addGameVersion minecraft_version

        mainArtifact(jar) {
            displayName = "${System.getenv('FILE_NAME')}-${minecraft_version}-${mod_version}"
        }
    }
}

jar {
    manifest {
        attributes(["Specification-Title"     : mod_id,
                    "Specification-Vendor"    : mod_authors,
                    "Specification-Version"   : "1", // We are version 1 of ourselves
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : mod_version,
                    "Implementation-Vendor"   : mod_authors,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")])
    }
}

jar.finalizedBy('reobfJar')
