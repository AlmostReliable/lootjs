plugins {
    id 'base'
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id "dev.architectury.loom" version "0.12.0-SNAPSHOT" apply false
    id "io.github.juuxel.loom-quiltflower" version "1.7.2" apply false
    id "com.github.johnrengelman.shadow" version "7.0.0" apply false
}

architectury {
    minecraft = project.minecraft_version
    injectInjectables = false
}

allprojects {
    ext.ENV = System.getenv()

    repositories {
        maven {
            url = "https://maven.architectury.dev"
            content {
                includeGroup "dev.architectury"
            }
        }

        maven {
            url "https://maven.saps.dev/minecraft"
            content {
                includeGroup "dev.latvian.mods"
                includeGroup "dev.ftb.mods"
            }
        }

        mavenLocal()
    }
}

base.archivesBaseName = project.mod_id

subprojects {
    apply plugin: "java"
    apply plugin: "dev.architectury.loom"
    apply plugin: 'architectury-plugin'
    apply plugin: "io.github.juuxel.loom-quiltflower"
    apply plugin: "maven-publish"

    version = rootProject.version
    group = rootProject.group
    base.archivesBaseName = "${rootProject.mod_id}-${project.name}-${rootProject.minecraft_version}"

    loom {
        silentMojangMappingsLicense()
    }

    compileJava {
        options.encoding = "UTF-8"
        options.release.set(17)
    }

    java {
        sourceCompatibility = targetCompatibility = '17'
        withSourcesJar()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings loom.officialMojangMappings()
    }
}

subprojects {
    if (project.path != ':common') {
        apply plugin: "com.github.johnrengelman.shadow"

        configurations {
            bundle {
                canBeResolved(true)
                canBeConsumed(false)
            }

            common
            compileClasspath.extendsFrom common
            runtimeClasspath.extendsFrom common
        }

        jar {
            archiveClassifier.set "dev"
        }

        shadowJar {
            archiveClassifier.set "dev-shadow"
            configurations = [
                    project.configurations.bundle
            ]
        }

        remapJar {
            dependsOn shadowJar
            inputFile.set shadowJar.archiveFile
            archiveClassifier.set null
        }

        processResources {
            def resourceTargets = ["META-INF/mods.toml", "pack.mcmeta", "fabric.mod.json"]
            def toReplace = [
                    version          : project.version,
                    license          : license,
                    minecraft_version: minecraft_version,
                    mod_id           : mod_id,
                    mod_name         : mod_name,
                    mod_author       : mod_author,
                    mod_description  : mod_description,
                    kubejs_version   : kubejs_version,
                    forge_min_version: forge_min_version,
                    github_user      : github_user,
                    github_repo      : github_repo
            ]

            inputs.properties toReplace
            filesMatching(resourceTargets) {
                expand toReplace
            }
        }
    }
}

task collectJars(type: Copy) {
    subprojects {
        if (project.path != ":common") {
            def remapJar = project.tasks.named('remapJar')
            dependsOn remapJar
            from remapJar
        }
    }

    into(buildDir.toPath().resolve("libs"))
}

assemble {
    dependsOn(collectJars)
}
